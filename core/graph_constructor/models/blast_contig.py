from core.graph_constructor.models.context import Context
from core.graph_constructor.models.contig import Contig
from core.graph_constructor.models.contig_region import ContigRegion


class BlastContig(Contig):
    """
    A special :class:`Contig` class that for storing BLAST
    result information.

    Usually, many *subjects* are aligned to a single *query*
    """

    BLAST = "BLAST"
    START_INDEX = 1

    def __init__(self, query, subject, contig_type,
                 score=0, evalue=10000, bit_score=1,
                 alignment_length=None, identical=1,
                 gaps_open=0, gaps=0):
        """
        Initializer for a special :class:`Contig` class that
        for storing BLAST result information.

        :param query: the query ContigRegion
        :param subject: the subject ContigRegion
        :param contig_type:
        :param score:
        :type score:
        :param evalue:
        :type evalue:
        :param bit_score:
        :type bit_score:
        :param alignment_length:
        :type alignment_length:
        :param identical:
        :type identical:
        :param gaps_open:
        :type gaps_open:
        :param gaps:
        :type gaps:
        """
        super(BlastContig, self).__init__(query, subject, contig_type)
        self.score = score
        self.evalue = evalue
        self.bit_score = bit_score
        self.identical = identical
        # self.alignment_length = alignment_length
        self.gaps = gaps
        self.gap_opens = gaps_open

        self.lp_extendable = True
        self.rp_extendable = True

    @property
    def has_perfect_alignment(self):
        return self.alignment_length == self.identical and \
               self.gaps == 0 and self.gap_opens == 0

    @staticmethod
    def extract_contig(data):
        """
        Returns the :class:`ContigRegion` representing the query from
        a blast result

        :param result: json blast result
        :return: ContigRegion
        """
        return ContigRegion(
            data["start"],
            data["end"],
            Context(data['length'], data['circular'], BlastContig.START_INDEX),
            name=data["name"],
            forward=True if data['strand'] == 'plus' else False,
            sequence=data['bases'],
            filename=None,
        )

    @staticmethod
    def extract_meta(result):
        """
        Extracts metadata from a blast result. Extracted features
        are:

        * gaps_opens
        * identical
        * evalue
        * score
        * gaps
        * bit_score
        * alignment_length

        :param result: json blast result
        :type result: dict
        :return:
        """
        meta_keys = ["gaps_open", "identical", "evalue", "score",
                     "gaps", "bit_score", "alignment_length"]
        meta = {k: result[k] for k in meta_keys}
        return meta

    # TODO: disallow creation of Contig that has gaps
    @staticmethod
    def create_from_blast_results(result):
        """
        Creates a :class:`BlastContig` from a blast result

        Expects the following JSON format for blast results:

        .. code:: json

            [
              {
                "query_acc": "Query_1",
                "subject_acc": "d611079f-36c7-4f48-b3d5-576ad6af1b89",
                "score": 4219,
                "evalue": 0,
                "bit_score": 7792,
                "alignment_length": 4219,
                "identical": 4219,
                "gap_opens": 0,
                "gaps": 0,
                "query_length": 10781,
                "q_start": 1374,
                "q_end": 5592,
                "subject_length": 7883,
                "s_start": 1,
                "s_end": 4219,
                "subject_strand": "plus",
                "query_seq": "TCGCGCGTTTCGGTGATGACGGTGAAAACCTCTGACACATGCAGCTCCCGGAGACGGTCACAGCTTGTCTGTAAGCGGATGCCGGGAGCAGACAAGCCCGTCAGGGCGCGTCAGCGGGTGTTGGCGGGTGTCGGGGCTGGCTTAACTATGCGGCGTTTAAACTTAGCAGATGCGCGCACCTGCGTTGTTACCACAACTCTTATGAGGCCCGCGGACAGCATCAAACTGTAAGATTCCGCCACATTTTATACACTCTGGTCCTTTAACTGGCAAACCTTCGGGCGTAATGCCCAATTTTTCGCCTTTGTCTTTTGCCTTTTTCACTTCACGTGCTTCTGGTACATACTTGCAATTTATACAGTGATGACCGCTGAATTTGTATCTTCCATAGCATCTAGCACATACTCGATTTTTACCACTCCAATCTTTATAAAAATACTTGATTCCCTTTCTGGGACAAGCAACACAGTGTTTTAGATTCTTTTTTTGTGATATTTTAAGCTGTTCTCCCACACAGCAGCCTCGACATGATTTCACTTCTATTTTGTTGCCAAGCAAGAAATTTTTATGGCCTTCTATCGTAAGCCCATATACAGTACTCTCACCCTGGAAATCATCCGTGAAGCTGAAATATACGGGTTCCCTTTTTATAATTGGCGGAACTTCTCTTGTTTTGTGACCACTTCGACAATATGACAAAACATTCTGTGAAGTTGTTCCCCCAGCATCAGAGCAGATTGTACTGAGAGTGCACCGGCGCGCCAGATCTGTTTAGCTTGCCTCGTCCCCGCCGGGTCACCCGGCCAGCGACATGGGGGCCCAGAATACCCTCCTTGACAGTCTTGACGTGCGCAGCTCAGGGGCATGATGTGACTGTCGCCCGTACATTTAGCCCATACATCCCCATGTATAATCATTTGCATCCATACATTTTGATGGCCGCACGGCGCGAAGCAAAAATTACGGCTCCTCGCTGCAGACCTGCGAGCAGGGAAACGCTCCCCTCACAGACGCGTTGAATTGTCCCCACGCCGCGCCCCTGTAGAGAAATATAAAAGGTTAGGATTTGCCACTGAGGTTCTTCTTTCATATACTTCCTTTTAAAATCTTGCTAGGATACAGTTCTCACATCACATCCGAACATAAACAACCATGGGTAAGGAAAAGACTCACGTTTCGAGGCCGCGATTAAATTCCAACATGGATGCTGATTTATATGGGTATAAATGGGCTCGCGATAATGTCGGGCAATCAGGTGCGACAATCTATCGATTGTATGGGAAGCCCGATGCGCCAGAGTTGTTTCTGAAACATGGCAAAGGTAGCGTTGCCAATGATGTTACAGATGAGATGGTCAGACTAAACTGGCTGACGGAATTTATGCCTCTTCCGACCATCAAGCATTTTATCCGTACTCCTGATGATGCATGGTTACTCACCACTGCGATCCCCGGCAAAACAGCATTCCAGATATTAGAAGAATATCCTGATTCAGGTGAAAATATTGTTGATGCGCTGGCAGTGTTCCTGCGCCGGTTGCATTCGATTCCTGTTTGTAATTGTCCTTTTAACAGCGATCGCGTATTTCGTCTCGCTCAGGCGCAATCACGAATGAATAACGGTTTGGTTGATGCGAGTGATTTTGATGACGAGCGTAATGGCTGGCCTGTTGAACAAGTCTGGAAAGAAATGCATAAGCTTTTGCCATTCTCACCGGATTCAGTCGTCACTCATGGTGATTTCTCACTTGATAACCTTATTTTTGACGAGGGGAAATTAATAGGTTGTATTGATGTTGGACGAGTCGGAATCGCAGACCGATACCAGGATCTTGCCATCCTATGGAACTGCCTCGGTGAGTTTTCTCCTTCATTACAGAAACGGCTTTTTCAAAAATATGGTATTGATAATCCTGATATGAATAAATTGCAGTTTCATTTGATGCTCGATGAGTTTTTCTAATCAGTACTGACAATAAAAAGATTCTTGTTTTCAAGAACTTGTCATTTGTATAGTTTTTTTATATTGTAGTTGTTCTATTTTAATCAAATGTTAGCGTGATTTATATTTTTTTTCGCCTCGACATCATCTGCCCAGATGCGAAGTTAAGTGCGCAGAAAGTAATATCATGCGTCAATCGTATGTGAATGCTGGTCGCTATACTGCTGTCGATTCGATACTAACGCCGCCATCCAGTGTCCGCCAGGGTTTTCCCAGTCACGACGCCTCTACCTTGCAGACCCATATAATATAATAACTAAATAAGTAAATAAGACACACGCGAGAACATATATACACAATTACAGTAACAATAACAAGAGGACAGATACTACCAAAATGTGTGGGGAAGCGGGTAAGCTGCCACAGCAATTAATGCACAACATTTAACCTACATTCTTCCTTATCGGATCCTCAAAACCCTTAAAAACATATGCCTCACCCTAACATATTTTCCAATTAACCCTCAATATTTCTCTGTCACCCGGCCTCTATTTTCCATTTTCTTCTTTACCCGCCACGCGTTTTTTTCTTTCAAATTTTTTTCTTCCTTCTTCTTTTTCTTCCACGTCCTCTTGCATAAATAAATAAACCGTTTTGAAACCAAACTCGCCTCTCTCTCTCCTTTTTGAAATATTTTTGGGTTTGTTTGATCCTTTCCTTCCCAATCTCTCTTGTTTAATATATATTCATTTATATCACGCTCTCTTTTTATCTTCCTTTTTTTCCTCTCTCTTGTATTCTTCCTTCCCCTTTCTACTCAAACCAAGAAGAAAAAGAAAAGGTCAATCTTTGTTAAAGAATAGGATCTTCTACTACATCAGCTTTTAGATTTTTCACGCTTACTGCTTTTTTCTTCCCAAGATCGAAAATTTACTGAATTAACAGGGCCCCCCCTCGAGGTCGACGGTATCGATAAGCTTGAAGCAAGCCTCCTGAAAGATGGGTACCCGCCCATATGCTTGCCCTGTCGAGTCCTGCGATCGCCGCTTTTCTCGCCACGCCAATCTTACCCGCCATATCCGCATCCATACCGGTCAGAAGCCCTTCCAGTGTCGAATCTGCATGCGTAACTTCAGTCGTAATGCGAACCTTGTGCGCCACATCCGCACCCACACAGGATCCCAAAAGCCGTTCCAATGTCGGATCTGTATGCGGAACTTTAGTCGAAAGGCCGACCTGAGGCGTCACATTCGCACGCACACCGGCGAGAAGCCTTTTGCCTGTGACATTTGTGGGAGGAAGTTTGCCAGGAAGGGCGACCTCAAGAGGCATACCAAAATCCATACAGGTGGCGGAGGCACACCTGCAGCTGCGTCGACTCTAGAGGATCCATCTGCTGGAGACATGAGAGCTGCCAACCTTTGGCCAAGCCCGCTCATGATCAAACGCTCTAAGAAGAACAGCCTGGCCTTGTCCCTGACGGCCGACCAGATGGTCAGTGCCTTGTTGGATGCTGAGCCCCCCATACTCTATTCCGAGTATGATCCTACCAGACCCTTCAGTGAAGCTTCGATGATGGGCTTACTGACCAACCTGGCAGACAGGGAGCTGGTTCACATGATCAACTGGGCGAAGAGGGTGCCAGGCTTTGTGGATTTGACCCTCCATGATCAGGTCCACCTTCTAGAATGTGCCTGGCTAGAGATCCTGATGATTGGTCTCGTCTGGCGCTCCATGGAGCACCCAGTGAAGCTACTGTTTGCTCCTAACTTGCTCTTGGACAGGAACCAGGGAAAATGTGTAGAGGGCATGGTGGAGATCTTCGACATGCTGCTGGCTACATCATCTCGGTTCCGCATGATGAATCTGCAGGGAGAGGAGTTTGTGTGCCTCAAATCTATTATTTTGCTTAATTCTGGAGTGTACACATTTCTGTCCAGCACCCTGAAGTCTCTGGAAGAGAAGGACCATATCCACCGAGTCCTGGACAAGATCACAGACACTTTGATCCACCTGATGGCCAAGGCAGGCCTGACCCTGCAGCAGCAGCACCAGCGGCTGGCCCAGCTCCTCCTCATCCTCTCCCACATCAGGCACATGAGTAACAAAGGCATGGAGCATCTGTACAGCATGAAGTGCAAGAACGTGGTGCCCCTCTATGACCTGCTGCTGGAGATGCTGGACGCCCACCGCCTACATGCGCCCACTAGCCGTGGAGGGGCATCCGTGGAGGAGACGGACCAAAGCCACTTGGCCACTGCGGGCTCTACTTCATCGG",
                "subject_seq": "TCGCGCGTTTCGGTGATGACGGTGAAAACCTCTGACACATGCAGCTCCCGGAGACGGTCACAGCTTGTCTGTAAGCGGATGCCGGGAGCAGACAAGCCCGTCAGGGCGCGTCAGCGGGTGTTGGCGGGTGTCGGGGCTGGCTTAACTATGCGGCGTTTAAACTTAGCAGATGCGCGCACCTGCGTTGTTACCACAACTCTTATGAGGCCCGCGGACAGCATCAAACTGTAAGATTCCGCCACATTTTATACACTCTGGTCCTTTAACTGGCAAACCTTCGGGCGTAATGCCCAATTTTTCGCCTTTGTCTTTTGCCTTTTTCACTTCACGTGCTTCTGGTACATACTTGCAATTTATACAGTGATGACCGCTGAATTTGTATCTTCCATAGCATCTAGCACATACTCGATTTTTACCACTCCAATCTTTATAAAAATACTTGATTCCCTTTCTGGGACAAGCAACACAGTGTTTTAGATTCTTTTTTTGTGATATTTTAAGCTGTTCTCCCACACAGCAGCCTCGACATGATTTCACTTCTATTTTGTTGCCAAGCAAGAAATTTTTATGGCCTTCTATCGTAAGCCCATATACAGTACTCTCACCCTGGAAATCATCCGTGAAGCTGAAATATACGGGTTCCCTTTTTATAATTGGCGGAACTTCTCTTGTTTTGTGACCACTTCGACAATATGACAAAACATTCTGTGAAGTTGTTCCCCCAGCATCAGAGCAGATTGTACTGAGAGTGCACCGGCGCGCCAGATCTGTTTAGCTTGCCTCGTCCCCGCCGGGTCACCCGGCCAGCGACATGGGGGCCCAGAATACCCTCCTTGACAGTCTTGACGTGCGCAGCTCAGGGGCATGATGTGACTGTCGCCCGTACATTTAGCCCATACATCCCCATGTATAATCATTTGCATCCATACATTTTGATGGCCGCACGGCGCGAAGCAAAAATTACGGCTCCTCGCTGCAGACCTGCGAGCAGGGAAACGCTCCCCTCACAGACGCGTTGAATTGTCCCCACGCCGCGCCCCTGTAGAGAAATATAAAAGGTTAGGATTTGCCACTGAGGTTCTTCTTTCATATACTTCCTTTTAAAATCTTGCTAGGATACAGTTCTCACATCACATCCGAACATAAACAACCATGGGTAAGGAAAAGACTCACGTTTCGAGGCCGCGATTAAATTCCAACATGGATGCTGATTTATATGGGTATAAATGGGCTCGCGATAATGTCGGGCAATCAGGTGCGACAATCTATCGATTGTATGGGAAGCCCGATGCGCCAGAGTTGTTTCTGAAACATGGCAAAGGTAGCGTTGCCAATGATGTTACAGATGAGATGGTCAGACTAAACTGGCTGACGGAATTTATGCCTCTTCCGACCATCAAGCATTTTATCCGTACTCCTGATGATGCATGGTTACTCACCACTGCGATCCCCGGCAAAACAGCATTCCAGATATTAGAAGAATATCCTGATTCAGGTGAAAATATTGTTGATGCGCTGGCAGTGTTCCTGCGCCGGTTGCATTCGATTCCTGTTTGTAATTGTCCTTTTAACAGCGATCGCGTATTTCGTCTCGCTCAGGCGCAATCACGAATGAATAACGGTTTGGTTGATGCGAGTGATTTTGATGACGAGCGTAATGGCTGGCCTGTTGAACAAGTCTGGAAAGAAATGCATAAGCTTTTGCCATTCTCACCGGATTCAGTCGTCACTCATGGTGATTTCTCACTTGATAACCTTATTTTTGACGAGGGGAAATTAATAGGTTGTATTGATGTTGGACGAGTCGGAATCGCAGACCGATACCAGGATCTTGCCATCCTATGGAACTGCCTCGGTGAGTTTTCTCCTTCATTACAGAAACGGCTTTTTCAAAAATATGGTATTGATAATCCTGATATGAATAAATTGCAGTTTCATTTGATGCTCGATGAGTTTTTCTAATCAGTACTGACAATAAAAAGATTCTTGTTTTCAAGAACTTGTCATTTGTATAGTTTTTTTATATTGTAGTTGTTCTATTTTAATCAAATGTTAGCGTGATTTATATTTTTTTTCGCCTCGACATCATCTGCCCAGATGCGAAGTTAAGTGCGCAGAAAGTAATATCATGCGTCAATCGTATGTGAATGCTGGTCGCTATACTGCTGTCGATTCGATACTAACGCCGCCATCCAGTGTCCGCCAGGGTTTTCCCAGTCACGACGCCTCTACCTTGCAGACCCATATAATATAATAACTAAATAAGTAAATAAGACACACGCGAGAACATATATACACAATTACAGTAACAATAACAAGAGGACAGATACTACCAAAATGTGTGGGGAAGCGGGTAAGCTGCCACAGCAATTAATGCACAACATTTAACCTACATTCTTCCTTATCGGATCCTCAAAACCCTTAAAAACATATGCCTCACCCTAACATATTTTCCAATTAACCCTCAATATTTCTCTGTCACCCGGCCTCTATTTTCCATTTTCTTCTTTACCCGCCACGCGTTTTTTTCTTTCAAATTTTTTTCTTCCTTCTTCTTTTTCTTCCACGTCCTCTTGCATAAATAAATAAACCGTTTTGAAACCAAACTCGCCTCTCTCTCTCCTTTTTGAAATATTTTTGGGTTTGTTTGATCCTTTCCTTCCCAATCTCTCTTGTTTAATATATATTCATTTATATCACGCTCTCTTTTTATCTTCCTTTTTTTCCTCTCTCTTGTATTCTTCCTTCCCCTTTCTACTCAAACCAAGAAGAAAAAGAAAAGGTCAATCTTTGTTAAAGAATAGGATCTTCTACTACATCAGCTTTTAGATTTTTCACGCTTACTGCTTTTTTCTTCCCAAGATCGAAAATTTACTGAATTAACAGGGCCCCCCCTCGAGGTCGACGGTATCGATAAGCTTGAAGCAAGCCTCCTGAAAGATGGGTACCCGCCCATATGCTTGCCCTGTCGAGTCCTGCGATCGCCGCTTTTCTCGCCACGCCAATCTTACCCGCCATATCCGCATCCATACCGGTCAGAAGCCCTTCCAGTGTCGAATCTGCATGCGTAACTTCAGTCGTAATGCGAACCTTGTGCGCCACATCCGCACCCACACAGGATCCCAAAAGCCGTTCCAATGTCGGATCTGTATGCGGAACTTTAGTCGAAAGGCCGACCTGAGGCGTCACATTCGCACGCACACCGGCGAGAAGCCTTTTGCCTGTGACATTTGTGGGAGGAAGTTTGCCAGGAAGGGCGACCTCAAGAGGCATACCAAAATCCATACAGGTGGCGGAGGCACACCTGCAGCTGCGTCGACTCTAGAGGATCCATCTGCTGGAGACATGAGAGCTGCCAACCTTTGGCCAAGCCCGCTCATGATCAAACGCTCTAAGAAGAACAGCCTGGCCTTGTCCCTGACGGCCGACCAGATGGTCAGTGCCTTGTTGGATGCTGAGCCCCCCATACTCTATTCCGAGTATGATCCTACCAGACCCTTCAGTGAAGCTTCGATGATGGGCTTACTGACCAACCTGGCAGACAGGGAGCTGGTTCACATGATCAACTGGGCGAAGAGGGTGCCAGGCTTTGTGGATTTGACCCTCCATGATCAGGTCCACCTTCTAGAATGTGCCTGGCTAGAGATCCTGATGATTGGTCTCGTCTGGCGCTCCATGGAGCACCCAGTGAAGCTACTGTTTGCTCCTAACTTGCTCTTGGACAGGAACCAGGGAAAATGTGTAGAGGGCATGGTGGAGATCTTCGACATGCTGCTGGCTACATCATCTCGGTTCCGCATGATGAATCTGCAGGGAGAGGAGTTTGTGTGCCTCAAATCTATTATTTTGCTTAATTCTGGAGTGTACACATTTCTGTCCAGCACCCTGAAGTCTCTGGAAGAGAAGGACCATATCCACCGAGTCCTGGACAAGATCACAGACACTTTGATCCACCTGATGGCCAAGGCAGGCCTGACCCTGCAGCAGCAGCACCAGCGGCTGGCCCAGCTCCTCCTCATCCTCTCCCACATCAGGCACATGAGTAACAAAGGCATGGAGCATCTGTACAGCATGAAGTGCAAGAACGTGGTGCCCCTCTATGACCTGCTGCTGGAGATGCTGGACGCCCACCGCCTACATGCGCCCACTAGCCGTGGAGGGGCATCCGTGGAGGAGACGGACCAAAGCCACTTGGCCACTGCGGGCTCTACTTCATCGG"
              },
            ...
            ]

        :param result: blast json result
        :type result: dict
        :return: BlastContig
        """
        query = BlastContig.extract_contig(result['query'])
        subject = BlastContig.extract_contig(result['subject'])
        features = BlastContig.extract_meta(result['meta'])
        return BlastContig(query, subject, BlastContig.BLAST, **features)


        #
        # def is_perfect_subject(self):
        #     pass
        #
        # def is_perfect_alignment(self):
        #     pass
        #
        # def pcr_products_of_contig(self, primers):
        #     pass
        #
        # def get_primers_withing_bounds(self, primers, min_primer_anneal=15):
        #     pass
        #
        # def primer_within_bounds(self, primer):
        #     pass
        #
        # def ends_equivalent(self, other):
        #     pass
        #
        # def json(self):
        #     passƒ
